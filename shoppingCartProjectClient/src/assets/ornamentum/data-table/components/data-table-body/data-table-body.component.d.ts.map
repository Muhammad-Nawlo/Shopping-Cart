{"version":3,"file":"data-table-body.component.d.ts","sources":["data-table-body.component.d.ts"],"names":[],"mappingssourcesContent":["import { TemplateRef } from '@angular/core';\nimport { DataTableRow } from '../../models/data-table-row.model';\nimport { DataTableColumnComponent } from '../data-table-column/data-table-column.component';\nimport { DataTableConfigService } from '../../services/data-table-config.service';\nimport { DataTableDataStateService } from '../../services/data-table-data-state.service';\nimport { DataTableEventStateService } from '../../services/data-table-event.service';\n/**\n * Data table body component. Data table body table definition rendering is handled by this component.\n */\nexport declare class DataTableBodyComponent {\n    config: DataTableConfigService;\n    dataStateService: DataTableDataStateService;\n    private eventStateService;\n    columns: DataTableColumnComponent[];\n    rowExpandTemplate: TemplateRef<any>;\n    rowExpandLoadingSpinnerTemplate: TemplateRef<any>;\n    constructor(config: DataTableConfigService, dataStateService: DataTableDataStateService, eventStateService: DataTableEventStateService);\n    /**\n     * Unique data row tracking callback.\n     * @param index Current index.\n     * @param dataRow Data row object reference.\n     */\n    dataRowTrackBy(index: number, dataRow: DataTableRow<any>): number;\n    /**\n     * Odd row status; True if row index is a odd number.\n     * @param row Data row object.\n     * @return True if odd row.\n     */\n    isOddRow(row: DataTableRow<any>): boolean;\n    /**\n     * Even row status; True if row index is a even number.\n     * @param row Data row object.\n     * @return True if even row.\n     */\n    isEvenRow(row: DataTableRow<any>): boolean;\n    /**\n     * Odd substitute row status by row index; True if row index is an odd substitute row.\n     * @param index Row index.\n     * @return True if odd substitute row.\n     */\n    isOddSubstituteRow(index: number): boolean;\n    /**\n     * Even substitute row status by row index; True if row index is an even substitute row.\n     * @param index Row index.\n     * @return True if even substitute row.\n     */\n    isEvenSubstituteRow(index: number): boolean;\n    /**\n     * On row expand event handler.\n     * @param $event Click event argument reference.\n     * @param dataRow Data row object.\n     */\n    onRowExpand($event: Event, dataRow: DataTableRow<any>): void;\n    /**\n     * On row initialize event handler.\n     * @param dataRow Data table row.\n     */\n    onRowInit(dataRow: any): void;\n    /**\n     * On cell initialize event handler.\n     * @param column Data table column component reference.\n     * @param row Data table row object.\n     */\n    onCellInit(column: DataTableColumnComponent, row: DataTableRow<any>): void;\n    /**\n     * Cell clicked event handler.\n     * @param column Column data table component reference.\n     * @param row Data table row reference.\n     * @param event Mouse click event argument reference.\n     */\n    cellClicked(column: DataTableColumnComponent, row: DataTableRow<any>, event: MouseEvent): void;\n    /**\n     * Get row span collection by data row.\n     * @param row Data row reference.\n     * @return Dummy row span collection.\n     */\n    getRowSpanCollection(row: DataTableRow<any>): any[];\n    /**\n     * Get total column count used for substitute row generation.\n     * @return Number of columns.\n     */\n    readonly totalColumnCount: number;\n    /**\n     * On row select click event handler.\n     * @param row Data row reference.\n     * @param event Row click event.\n     */\n    onRowSelectClick(row: DataTableRow<any>, event: Event): void;\n    /**\n     * On row selection change event handler.\n     * @param row Data row reference.\n     */\n    onRowSelectChange(row: DataTableRow<any>): void;\n    /**\n     * Row clicked event handler.\n     * @param row Data row object.\n     * @param event Mouse click event argument object.\n     */\n    rowClicked(row: DataTableRow<any>, event: MouseEvent): void;\n    /**\n     * Row double clicked event handler.\n     * @param row Data row object.\n     * @param event Event Mouse click event argument object.\n     */\n    rowDoubleClicked(row: DataTableRow<any>, event: MouseEvent): void;\n    /**\n     * Get substitute row availability status.\n     * @return True if substitute rows are available.\n     */\n    readonly hasSubstituteRows: boolean;\n    /**\n     * Get cell value by data field.\n     * @param row Data row reference.\n     * @param column Data table column component reference.\n     */\n    getFieldValue(row: DataTableRow<any>, column: DataTableColumnComponent): any;\n    /**\n     * Get row select checkbox display status.\n     * @return True if row selector checkbox should be displayed.\n     */\n    readonly showRowSelectCheckbox: boolean;\n    /**\n     * Get row expend view loading status. Used to display loading spinner on expand column while data fetching.\n     * @param row Data row object reference.\n     */\n    isRowExpanderLoading(row: DataTableRow<any>): boolean;\n}\n"]}