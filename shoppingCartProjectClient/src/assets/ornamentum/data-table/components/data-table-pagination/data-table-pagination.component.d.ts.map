{"version":3,"file":"data-table-pagination.component.d.ts","sources":["data-table-pagination.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { OnInit } from '@angular/core';\nimport { DataTableConfigService } from '../../services/data-table-config.service';\nimport { DataTableDataStateService } from '../../services/data-table-data-state.service';\nimport { DataTableEventStateService } from '../../services/data-table-event.service';\nimport { ResizeService } from '../../../utility/services/resize.service';\n/**\n * Data table pagination component. Render data table paginator widget.\n */\nexport declare class DataTablePaginationComponent implements OnInit {\n    config: DataTableConfigService;\n    dataStateService: DataTableDataStateService;\n    private eventStateService;\n    private resizeService;\n    private paginationContainer;\n    isMobile: boolean;\n    constructor(config: DataTableConfigService, dataStateService: DataTableDataStateService, eventStateService: DataTableEventStateService, resizeService: ResizeService);\n    /**\n     * Set mobile mode state.\n     */\n    private setMobileModeState;\n    /**\n     * First page click event handler.\n     */\n    firstPageClick(): void;\n    /**\n     * Previous page click event handler.\n     */\n    previousPageClick(): void;\n    /**\n     * Next page click event handler.\n     */\n    nextPageClick(): void;\n    /**\n     * Last page click event handler.\n     */\n    lastPageClick(): void;\n    /**\n     * Get maximum page count.\n     */\n    readonly maxPage: number;\n    /**\n     * Get page number.\n     */\n    readonly page: number;\n    /**\n     * Check limit invalid status. True if limit is invalid.\n     * @param element Limit input DOM element.\n     * @return Invalid status.\n     */\n    isInvalidLimit(element: HTMLInputElement): boolean;\n    /**\n     * On page size change event handler.\n     * @param element HTML input element.\n     */\n    onPageSizeChange(element: HTMLInputElement): void;\n    /**\n     * On page size revert event handler.\n     * @param element HTML input element.\n     */\n    onPageSizeRevert(element: HTMLInputElement): void;\n    /**\n     * Is invalid page index; True if page index is invalid.\n     * @param element Page index DOM element.\n     * @return Invalid status.\n     */\n    isInvalidPageIndex(element: HTMLInputElement): boolean;\n    /**\n     * On page size change event handler.\n     * @param element HTML input element.\n     */\n    onPageIndexChange(element: HTMLInputElement): void;\n    /**\n     * On page size revert event handler.\n     * @param element HTML input element.\n     */\n    onPageIndexRevert(element: HTMLInputElement): void;\n    /**\n     * Get previous page availability status.\n     */\n    readonly hasPrevious: boolean;\n    /**\n     * Get next page availability status.\n     */\n    readonly hasNext: boolean;\n    /**\n     * Get start row index.\n     */\n    readonly startRowIndex: number;\n    /**\n     * Get end row index.\n     */\n    readonly endRowIndex: number;\n    /**\n     * Prevent invalid key press.\n     * @param event Keyboard event argument object.\n     */\n    preventInvalidKeyPress(event: KeyboardEvent): void;\n    /**\n     * component init lifecycle event handler.\n     */\n    ngOnInit(): void;\n}\n"]}