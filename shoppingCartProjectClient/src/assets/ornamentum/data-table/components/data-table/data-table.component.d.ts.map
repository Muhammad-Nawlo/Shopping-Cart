{"version":3,"file":"data-table.component.d.ts","sources":["data-table.component.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter, OnDestroy, QueryList, TemplateRef, AfterContentInit, ElementRef, OnInit, NgZone } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { DataTableFilterValueExtractCallback } from '../../models/data-table-filter-value-extract-callback.model';\nimport { DataTableCellBindEventArgs } from '../../models/data-table-cell-bind-event-args.model';\nimport { DataTableCellClickEventArgs } from '../../models/data-table-cell-click-event-args.model';\nimport { DataTableHeaderClickEventArgs } from '../../models/data-table-header-click-event-args.model';\nimport { DataTableDoubleClickEventArgs } from '../../models/data-table-double-click-event-args.model';\nimport { DataTableRowClickEventArgs } from '../../models/data-table-row-click-event-args.model';\nimport { DataTableRow } from '../../models/data-table-row.model';\nimport { DataTableTranslations } from '../../models/data-table-translations.model';\nimport { DataTableDynamicRowSpanExtractorCallback } from '../../models/data-table-group-field-extractor-callback.model';\nimport { DataTableDataBindCallback } from '../../models/data-table-data-bind-callback.model';\nimport { DataTableSelectMode } from '../../models/data-table-select-mode.model';\nimport { DataTableStorageMode } from '../../models/data-table-storage-mode.model';\nimport { DataFetchMode } from '../../models/data-fetch-mode.enum';\nimport { DataTableColumnComponent } from '../data-table-column/data-table-column.component';\nimport { DragAndDropService, GlobalRefService } from '../../../utility/utility.module';\nimport { DataTableEventStateService } from '../../services/data-table-event.service';\nimport { DataTableDataStateService } from '../../services/data-table-data-state.service';\nimport { DataTablePersistenceService } from '../../services/data-table-persistence.service';\nimport { DataTableConfigService } from '../../services/data-table-config.service';\nimport { DataTableScrollPositionService } from '../../services/data-table-scroll-position.service';\nimport { DataTableResourceService } from '../../services/data-table-resource.service';\n/**\n * Data table component; Data table entry component.\n */\nexport declare class DataTableComponent implements OnDestroy, OnInit, AfterContentInit, ControlValueAccessor {\n    private dragAndDropService;\n    private dataTableStateService;\n    private globalRefService;\n    private eventStateService;\n    private dataTableResourceService;\n    private zone;\n    dataStateService: DataTableDataStateService;\n    scrollPositionService: DataTableScrollPositionService;\n    config: DataTableConfigService;\n    private rowSelectChangeSubscription;\n    private dataFetchStreamSubscription;\n    private scrollPositionSubscription;\n    /**\n     * Data table column component collection.\n     */\n    columns: QueryList<DataTableColumnComponent>;\n    /**\n     * Template to display when data row is expanded for detail view.\n     */\n    rowExpandTemplate: TemplateRef<any>;\n    /**\n     * Template to display when data set is empty.\n     */\n    noRecordsTemplate: TemplateRef<any>;\n    /**\n     * Template to display while loading data.\n     */\n    loadingSpinnerTemplate: TemplateRef<any>;\n    /**\n     * Template to display while row is expanding to load detail view.\n     */\n    rowExpandLoadingSpinnerTemplate: TemplateRef<any>;\n    /**\n     * Data table self DOM element reference.\n     */\n    dataTableElement: ElementRef<HTMLDivElement>;\n    /**\n     * Data table initialize event handler.\n     * Triggered after data table initialize.\n     */\n    init: EventEmitter<DataTableComponent>;\n    /**\n     * Row selected state change event handler.\n     * Triggered when table row selected state change.\n     */\n    rowSelectChange: EventEmitter<any | any[]>;\n    /**\n     * Row click event handler.\n     * Triggered when data row is clicked.\n     */\n    rowClick: EventEmitter<DataTableRowClickEventArgs<any>>;\n    /**\n     * Row double click event handler.\n     * Triggered when data row is double clicked.\n     */\n    rowDoubleClick: EventEmitter<DataTableDoubleClickEventArgs<any>>;\n    /**\n     * Header click event handler.\n     * Triggered when header column clicked.\n     */\n    headerClick: EventEmitter<DataTableHeaderClickEventArgs>;\n    /**\n     * All row select change event handler.\n     * Triggered when all row select state changed.\n     */\n    allRowSelectChange: EventEmitter<boolean>;\n    /**\n     * Cell click event handler.\n     * Triggered when clicked on a cell.\n     */\n    cellClick: EventEmitter<DataTableCellClickEventArgs<any>>;\n    /**\n     * Data bound event handler.\n     * Triggered after data bind.\n     */\n    dataBound: EventEmitter<void>;\n    /**\n     * Row bind event handler.\n     * Trigger on each row data bind.\n     */\n    rowBind: EventEmitter<DataTableRow<any>>;\n    /**\n     * Column bind event handler.\n     * Triggered after column data bind.\n     */\n    columnBind: EventEmitter<DataTableColumnComponent>;\n    /**\n     * Cell bind event handler.\n     * Triggered after data table cell data bind.\n     */\n    cellBind: EventEmitter<DataTableCellBindEventArgs<any>>;\n    /**\n     * Set data bind event handler callback. This handler is fired on each data fetch request.\n     */\n    onDataBind: DataTableDataBindCallback<any>;\n    /**\n     * Set filter value extract event handler callback. Used to extract filter value collection dynamically when\n     * explicit data bind functionality is used with onDataBind callback.\n     */\n    onFilterValueExtract: DataTableFilterValueExtractCallback;\n    /**\n     * Set on dynamic row span extract event handler callback.\n     */\n    onDynamicRowSpanExtract: DataTableDynamicRowSpanExtractorCallback<any>;\n    /**\n     * Set static data items collection. No need to set data source when static items collection is provided.\n     */\n    items: any[];\n    /**\n     * Set data source observable. This observable is used to retrieve row data for binding.\n     */\n    dataSource: Observable<any[]>;\n    /**\n     * Set data table unique identifier.\n     */\n    id: string;\n    /**\n     * Set persist table state on provided storage mode if true. Depends on storageMode property.\n     */\n    persistTableState: boolean;\n    /**\n     * Set storage mode to persist table state. Only applicable when persistTableState is true.\n     */\n    storageMode: DataTableStorageMode;\n    /**\n     * Set multiple column sortable if true. Only applicable for sortable true columns.\n     */\n    multiColumnSortable: boolean;\n    /**\n     * Set table header bar visible if true.\n     */\n    showHeader: boolean;\n    /**\n     * Set title to be shown in the header. Only applicable when showHeader is true.\n     */\n    title: string;\n    /**\n     * Set width value in pixels. Can be used to set the width of teh table (responsive if not set).\n     */\n    width: string | number;\n    /**\n     * Set minimum table content height value in pixels. Can be used to set the minimum height of the table content area.\n     */\n    minContentHeight: string | number;\n    /**\n     * Minimum table content width value in pixels. Can be used to set the minimum width of the table content area.\n     */\n    minContentWidth: string | number;\n    /**\n     * Table content height value in pixels. This configuration can be used to enable table content vertical\n     * scrolling for responsive design.\n     */\n    contentHeight: string | number;\n    /**\n     * Show pagination bar if true. Depends on offset and limit values. Trigger dataLoad event with offset\n     * and limit values.\n     */\n    pageable: boolean;\n    /**\n     * Enable scrolling based on-demand data loading functionality if true. Trigger dataLoad event with offset\n     * and limit values when scroll to bottom until data source exhaust.\n     */\n    loadOnScroll: boolean;\n    /**\n     * Set view height distance ratio to trigger data fetch on scroll. Applicable only when load on scroll mode is enabled.\n     */\n    loadViewDistanceRatio: number;\n    /**\n     * Set auto generated index column with row numbering if true.\n     */\n    showIndexColumn: boolean;\n    /**\n     * Set index column header title. Applicable when showIndexColumn is true.\n     */\n    indexColumnTitle: string;\n    /**\n     * Set row select checkbox and select state if true.\n     */\n    rowSelectable: boolean;\n    /**\n     * Data table row select mode. Applicable only when rowSelectable is true.\n     */\n    selectMode: DataTableSelectMode;\n    /**\n     * Set select all row checkbox on column header visible if true.\n     * Only applicable when showRowSelectCheckbox, rowSelectable is true & item selectMode is  multi.\n     */\n    showRowSelectCheckbox: boolean;\n    /**\n     * Set select all row checkbox on column header visible if true.\n     * Only applicable when showRowSelectCheckbox, rowSelectable is true & item selectMode is  multi.\n     */\n    showRowSelectAllCheckbox: boolean;\n    /**\n     * Set substitute rows visible if true. Fill with empty rows when row count < limit.\n     */\n    showSubstituteRows: boolean;\n    /**\n     * Set row expander visible if true. Render ngDataTableExpand template on expand click.\n     */\n    expandableRows: boolean;\n    /**\n     * Set trigger row select on click event if true. Applicable only when rowSelectable is true.\n     */\n    selectOnRowClick: boolean;\n    /**\n     * Set expand and render expand template on row click if true. Only applicable when expandableRows is true.\n     */\n    expandOnRowClick: boolean;\n    /**\n     * Auto trigger dataLoad event on initialization if true.\n     */\n    autoFetch: boolean;\n    /**\n     * Set loading spinner visible if true. Show loading spinner when data fetch operation is triggered.\n     */\n    showLoadingSpinner: boolean;\n    /**\n     * Set select option track by field path which is used to uniquely identify row for selection tracking.\n     * This field support object paths expressions 'root[0].nest'.\n     */\n    selectTrackBy: string;\n    /**\n     * Set selected row identifier. Select specified row on initial load.\n     * Applicable when row select mode is SINGLE or SINGLE_TOGGLE.\n     */\n    selectedRow: any;\n    /**\n     * Set selected row identifiers collection. Select specified rows on initial load.\n     * Applicable when selectMode is SINGLE or SINGLE_TOGGLE true.\n     */\n    selectedRows: any[];\n    /**\n     * Set filter debounce time in milliseconds. Applicable only when filterDebounce is true.\n     */\n    filterDebounceTime: number;\n    /**\n     * Set filter data debounce enabled state with provided filterDebounceTime if true.\n     */\n    filterDebounce: boolean;\n    /**\n     * Set refresh button visible if true. Only applicable when showHeader is true.\n     */\n    showRefreshButton: boolean;\n    /**\n     * Row selector column width in pixels. Applicable only when showColumnSelector is true.\n     */\n    showColumnSelector: boolean;\n    /**\n     * Set column selector dropdown width in pixels. Only applicable when showColumnSelector is true.\n     */\n    columnSelectorWidth: number;\n    /**\n     * Set expander column width in pixels. Applicable only when expandableRows is true.\n     */\n    expanderColumnWidth: number | string;\n    /**\n     * Set index column width in pixels. Applicable only when showIndexColumn is true.\n     */\n    indexColumnWidth: number | string;\n    /**\n     * Set row selector column width in pixels. Applicable only when showColumnSelector is true.\n     */\n    selectionColumnWidth: number | string;\n    /**\n     * Set translation data object. Used to localize table static label text.\n     */\n    translations: DataTableTranslations;\n    /**\n     * Set row expand loading spinner visible if true. Applicable only when row expand is enabled.\n     */\n    showRowExpandLoadingSpinner: boolean;\n    /**\n     * Set data offset value (start offset index). Applicable only when pageable is true.\n     */\n    offset: number;\n    /**\n     * Set data limit value (page size). Applicable only when pageable is true.\n     */\n    limit: number;\n    /**\n     * Set current page number. Auto calculate offset depending on page number,\n     * do not explicitly set offset when page is used.\n     */\n    /**\n    * Get current page number.\n    */\n    page: number;\n    /**\n     * Get data table header padding in pixels.\n     */\n    readonly headerPadding: number;\n    /**\n     * Get data loading status.\n     */\n    readonly isLoading: boolean;\n    constructor(dragAndDropService: DragAndDropService, dataTableStateService: DataTablePersistenceService, globalRefService: GlobalRefService, eventStateService: DataTableEventStateService, dataTableResourceService: DataTableResourceService<any>, zone: NgZone, dataStateService: DataTableDataStateService, scrollPositionService: DataTableScrollPositionService, config: DataTableConfigService);\n    /**\n     * On after data bind event handler\n     * @param queryResult Query result object\n     */\n    private onAfterDataBind;\n    /**\n     * Get data item selected state\n     * @param item Data item object\n     * @return True if item is selected\n     */\n    private getSelectedState;\n    /**\n     * Set data table item collection\n     * @param items Data table item collection\n     */\n    private setDataRows;\n    /**\n     * Initialize data fetch event\n     */\n    private initDataFetchEvent;\n    /**\n     * Re-map data binding data\n     * @param fetchMode Data fetch mode\n     * @return Data table query result stream\n     */\n    private mapDataBind;\n    /**\n     * Initialize data table state via previous state snapshot; Applicable only when persist table state is enabled\n     */\n    private initDataTableState;\n    /**\n     * After component initialize lifecycle event handler\n     */\n    ngAfterContentInit(): void;\n    /**\n     * Reset column sort and filter state\n     */\n    private clearColumnState;\n    /**\n     * Clear selected data row status\n     */\n    private clearRowSelectState;\n    /**\n     * Fetch data from data source\n     * @param fetchMode Data fetch mode\n     */\n    fetchData(fetchMode?: DataFetchMode): void;\n    /**\n     * Initialize data source\n     * @param source Data source stream\n     */\n    initDataSource(source: Observable<any>): void;\n    /**\n     * Component value write event handler; Form control support implementation\n     */\n    writeValue(value: any): void;\n    /**\n     * Register select change event handler; Form control support implementation\n     * @param onSelectChange Select change event handler callback\n     */\n    registerOnChange(onSelectChange: (value: any) => void): void;\n    /**\n     * Register on touch event handler; Form control support implementation\n     * @param fn Touch event callback handler\n     */\n    registerOnTouched(fn: any): void;\n    /**\n     * Get table width in pixels\n     */\n    readonly tableWidth: number;\n    ngOnInit(): void;\n    /**\n     * Component destroy lifecycle event handler\n     */\n    ngOnDestroy(): void;\n}\n"]}