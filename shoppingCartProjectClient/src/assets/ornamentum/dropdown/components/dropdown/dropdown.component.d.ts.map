{"version":3,"file":"dropdown.component.d.ts","sources":["dropdown.component.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter, Injector, OnDestroy, OnInit, Renderer2, TemplateRef } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { DropdownTranslations } from '../../models/dropdown-translations.model';\nimport { DropdownDataBindCallback } from '../../models/dropdown-data-bind-callback.model';\nimport { DropdownSelectMode } from '../../models/dropdown-select-mode.model';\nimport { PopoverComponentLoaderFactoryService } from '../../../utility/utility.module';\nimport { DropdownConfigService } from '../../services/dropdown-config.service';\nimport { DropdownDataStateService } from '../../services/dropdown-data-state.service';\nimport { DropdownEventStateService } from '../../services/dropdown-event-state.service';\nimport { DropdownResourceService } from '../../services/dropdown-resource.service';\nimport { ViewPosition } from '../../../utility/models/view-position.model';\n/**\n * Dropdown main component.\n */\nexport declare class DropdownComponent implements OnInit, OnDestroy, ControlValueAccessor {\n    private componentLoaderFactory;\n    private injector;\n    private eventStateService;\n    private dropdownResourceService;\n    private renderer;\n    dataStateService: DropdownDataStateService;\n    config: DropdownConfigService;\n    private onSelectChangeSubscription;\n    loadingSpinnerTemplate: TemplateRef<any>;\n    optionTemplate: TemplateRef<any>;\n    optionGroupHeaderTemplate: TemplateRef<any>;\n    /**\n     * Dropdown initialize event handler\n     */\n    init: EventEmitter<DropdownComponent>;\n    /**\n     * Dropdown option select change event handler\n     */\n    selectChange: EventEmitter<any[] | any>;\n    /**\n     * Dropdown data bind event handler\n     */\n    dataBound: EventEmitter<void>;\n    /**\n     * Set data bind callback. This handler is fired on each data fetch request.\n     */\n    onDataBind: DropdownDataBindCallback<any>;\n    /**\n     * Set dropdown loading spinner template reference object. Used by data table component to explicitly pass the template reference.\n     */\n    loadingSpinnerTemplateRef: TemplateRef<any>;\n    /**\n     * Set dropdown option template reference. Used by data table component to explicitly pass the template reference.\n     */\n    optionTemplateRef: TemplateRef<any>;\n    /**\n     * Set dropdown options group header template reference. Used by data table component to explicitly pass the template reference.\n     */\n    optionGroupHeaderTemplateRef: TemplateRef<any>;\n    /**\n     * Set static dropdown options collection. No need to set data source when static options collection is provided.\n     */\n    options: any[];\n    /**\n     * Set data source observable. This observable is used to retrieve dropdown options for data binding.\n     */\n    dataSource: Observable<any[]>;\n    /**\n     * Set dropdown unique identifier.\n     */\n    id: string;\n    /**\n     * Set translation data object. Used to localize table static label text.\n     */\n    translations: DropdownTranslations;\n    /**\n     * Set select option track by field path which is used to uniquely identify options for selection tracking.\n     * This field support object paths expressions 'root[0].nest'.\n     */\n    selectTrackBy: string;\n    /**\n     * Set display value track by field path which is used to extract dropdown option display value.\n     * This field support object paths expressions 'root[0].nest'.\n     */\n    displayTrackBy: string;\n    /**\n     * Set options group field path which is used to group the dropdown options.\n     * This field support object paths expressions 'root[0].nest'.\n     */\n    groupByField: string;\n    /**\n     * Set dropdown option disable state field path which is used to disabled state dropdown options.\n     * This field support object paths expressions 'root[0].nest'.\n     */\n    disabledTrackBy: string;\n    /**\n     * Set selected options collection. These options will be set selected by default on initial load.\n     * Applicable only when multi select mode is enabled.\n     */\n    selectedOptions: any[];\n    /**\n     * Set selected option. This option is selected by default on initial load.\n     * Applicable only when single select mode is enabled.\n     */\n    selectedOption: any;\n    /**\n     * Set number of options to fetch on scroll to bottom action when load on scroll mode is enabled.\n     */\n    limit: number;\n    /**\n     * Set wrap selected options in dropdown view and show the number of options selected instead when\n     * limit is met or exceeded. Applicable only when multi select mode is enabled.\n     */\n    wrapDisplaySelectLimit: number;\n    /**\n     * Set infinite scrollable state to load data on demand with scroll motion. Dropdown data fetch call is\n     * initiated with limit and offset when user scroll to bottom hence loading the full data set on init.\n     */\n    loadOnScroll: boolean;\n    /**\n     * Set view height ratio to trigger data fetch with infinite scrollable mode.\n     * Higher ratio will will increase the scroll sensitivity.\n     */\n    loadViewDistanceRatio: number;\n    /**\n     * Set option select mode.\n     * - 'multi' : Support selecting multiple options.\n     * - 'single' : Support selecting a single option from options collection.\n     * - 'single-toggle' : Support selecting a single option from options collection. Selection can not be removed but\n     * only toggled by tapping on another option.\n     */\n    selectMode: DropdownSelectMode;\n    /**\n     * Show dropdown option search filter text-box if true.\n     */\n    filterable: boolean;\n    /**\n     * Set default filter value to be applied on initial load. All options are displayed when filter text value is\n     * empty string. Applicable only when dropdown is filterable.\n     */\n    filterText: string;\n    /**\n     * Set time based filter debounce to optimize performance and avoid request flooding by reducing the filter\n     * request frequency if true. Applicable only when dropdown filterable state is enabled.\n     */\n    filterDebounce: boolean;\n    /**\n     * Set filter debounce time in milliseconds. Applicable only when searchDebounce is true.\n     */\n    filterDebounceTime: number;\n    /**\n     * Set load data on component initialize if true.\n     */\n    loadDataOnInit: boolean;\n    /**\n     * Show selected option remove button if true.\n     * Applicable only when multi select mode ios enabled.\n     */\n    showSelectedOptionRemoveButton: boolean;\n    /**\n     * Set show all select options clear button if true.\n     * Applicable only when multi select mode ios enabled.\n     */\n    showClearSelectionButton: boolean;\n    /**\n     * Set options menu width in pixels.\n     */\n    menuWidth: number;\n    /**\n     * Set options menu height in pixels.\n     */\n    menuHeight: number;\n    /**\n     * Set popup options menu display position relative to dropdown component.\n     * Support 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right' values.\n     */\n    menuPosition: ViewPosition;\n    /**\n     * Set dropdown view disabled state.\n     */\n    disabled: boolean;\n    /**\n     * Set Close dropdown menu on option select if true.\n     */\n    closeMenuOnSelect: boolean;\n    /**\n     * Set show dropdown option select checkbox if true.\n     */\n    showOptionSelectCheckbox: boolean;\n    /**\n     * Set show dropdown option index checkbox if true.\n     */\n    showOptionIndex: boolean;\n    /**\n     * Set show dropdown option TrackBy id checkbox if true.\n     */\n    showOptionTrackBy: boolean;\n    /**\n     * Multi select option selected item maximum width. Apply ellipsis when selected option display text\n     * exceed the max width.\n     */\n    multiSelectOptionMaxWidth: number;\n    /**\n     * Set first dropdown option selected on data fetch if true.\n     */\n    setFirstOptionSelected: boolean;\n    /**\n     * Trigger select change event on init if true.\n     * Can be used to enable selectedOptions or selectedOption associated change trigger.\n     */\n    triggerSelectChangeOnInit: boolean;\n    /**\n     * Set trigger select change on explicit model update if true.\n     * Applicable only when form binding is used.\n     */\n    triggerSelectChangeOnModelUpdate: boolean;\n    /**\n     * Set trigger select change on first option select change if true.\n     * Applicable only when setFirstOptionSelected is true.\n     */\n    triggerSelectChangeOnFirstOptionSelect: boolean;\n    /**\n     * Set dynamically calculate dropdown view dimensions relative to dropdown button width.\n     * MenuWith and menuHeight values are ignored when true.\n     */\n    dynamicDimensionCalculation: boolean;\n    /**\n     * Set dynamic dropdown options view dimensions calculation width ratio relative to dropdown selector.\n     */\n    dynamicWidthRatio: number;\n    /**\n     * Set dynamic dropdown options view dimensions calculation height ratio relative to dropdown selector.\n     */\n    dynamicHeightRatio: number;\n    /**\n     * Set relative parent element to render dropdown view container.\n     */\n    relativeParentElement: HTMLElement;\n    constructor(componentLoaderFactory: PopoverComponentLoaderFactoryService, injector: Injector, eventStateService: DropdownEventStateService, dropdownResourceService: DropdownResourceService<any>, renderer: Renderer2, dataStateService: DropdownDataStateService, config: DropdownConfigService);\n    /**\n     * Initialize data source.\n     * @param source Data source stream.\n     */\n    private initDataSource;\n    /**\n     * Performs dropdown toggle event.\n     * @param event Mouse click event args.\n     * @param element Dropdown button element.\n     */\n    toggleDropdown(event: MouseEvent, element: HTMLElement): void;\n    /**\n     * Get options wrapped state.\n     */\n    readonly wrapSelectedOptions: boolean;\n    /**\n     * Get wrapped option display text.\n     */\n    readonly wrappedOptionDisplayText: string;\n    /**\n     * Lifecycle hook that is called when component is destroyed.\n     */\n    ngOnDestroy(): void;\n    /**\n     * Get selected options availability state.\n     */\n    readonly hasSelectedOptions: boolean;\n    /**\n     * Trigger select change.\n     */\n    triggerSelectChange(): void;\n    /**\n     * Clear selected options.\n     */\n    clearSelectedOptions(): void;\n    /**\n     * Set disabled state.\n     * ControlValueAccessor implementation.\n     * @param isDisabled True if disabled.\n     */\n    setDisabledState?(isDisabled: boolean): void;\n    /**\n     * Called when value selected value gets updated.\n     * ControlValueAccessor implementation.\n     * @param value Selected value.\n     */\n    writeValue(value: any): void;\n    /**\n     * Register on change event.\n     * ControlValueAccessor implementation.\n     * @param onSelectChange On select change callback function.\n     */\n    registerOnChange(onSelectChange: (value: any[] | any) => void): void;\n    /**\n     * Register on touched event.\n     * ControlValueAccessor implementation.\n     * @param fn Function reference.\n     */\n    registerOnTouched(fn: any): void;\n    /**\n     * Lifecycle hook that is called when component is initialized.\n     */\n    ngOnInit(): void;\n    /**\n     * Map source data object to dropdown option model.\n     * @param option Source dropdown option.\n     * @param index Current index.\n     */\n    private mapDropdownOption;\n    /**\n     *\n     * Set dropdown options data.\n     * @param queryResult Query result object reference.\n     */\n    private setDropdownOptions;\n    /**\n     * On after data bind event handler.\n     * @param queryResult Query result object reference.\n     */\n    private onAfterDataBind;\n    /**\n     * Fetch query results.\n     * @param hardReload Hard reload state.\n     */\n    private fetchQueryResults;\n    /**\n     * Initialize data fetch event.\n     */\n    private initDataFetchEvent;\n    /**\n     * Trigger explicit data fetch.\n     * @param hardReload Hard reload state.\n     */\n    fetchData(hardReload?: boolean): void;\n    /**\n     * On select option remove event handler.\n     * @param index Selected option index.\n     */\n    onSelectOptionRemove(index: number): void;\n    /**\n     * Close dropdown options menu.\n     */\n    close(): void;\n}\n"]}